#!/usr/bin/perl

use strict;
use warnings;

use IO::Socket::UNIX qw( SOCK_STREAM SOMAXCONN );
use JSON::XS;
use MIME::Base64;
use Error qw(:try);

use Samba4Sync::LDAP;

use EBox;
use EBox::Exceptions::Internal;

use constant SOCK_PATH => '/var/run/ldb';

my $server = undef;

# Open socket to receive the messages from the Zentyal LDB module
$server = openSocket(SOCK_PATH);
unless (defined $server) {
    die ("Can't create server socket: $!\n");
}

# Init Zentyal framework after create the socket to avoid permission denied
EBox::init();
_info("Samba4 synchronizer daemon started");

# Wait for clients
while (my $socket = $server->accept() ) {
    my $ret = 0;
    try {
        unless (defined $socket) {
            _error("Can't accept connection: $!\n");
            next;
        }

        chomp (my $line = <$socket>);
        my $parameters = decode_json($line);
        my $operation = delete $parameters->{operation};
        if (defined $operation) {
            if ($operation eq "LDB_ADD") {
                my $dn    = delete $parameters->{dn};
                my $mods  = delete $parameters->{mods};
                debugMessage($operation, $dn, $mods);
                $ret = Samba4Sync::LDAP::add($dn, $mods);
            } elsif ($operation eq "LDB_MODIFY") {
                my $dn     = delete $parameters->{dn};
                my $mods   = delete $parameters->{mods};
                my $object = delete $parameters->{object};
                debugMessage($operation, $dn, $mods, $object);
                $ret = Samba4Sync::LDAP::modify($dn, $mods, $object);
            } elsif ($operation eq "LDB_DELETE") {
                my $dn     = delete $parameters->{dn};
                my $object = delete $parameters->{object};
                debugMessage($operation, $dn, $object);
                $ret = Samba4Sync::LDAP::del($dn, $object);
            } else {
                _warning("Unknown operation: $operation");
            }
        } else {
            _warning("Undefined operation");
        }
    } otherwise {
        my $error = shift;
        _error($error);
        $ret = -1;
    };

    if ($ret == 0) {
        _debug("Returning 'OK' to LDB");
        print $socket "OK";
    } else {
        _debug("Returning 'NOK' to LDB");
        print $socket "NOK";
    }
}

_info("Samba4 synchronizer daemon stopped");

exit 0;

# Method: openSocket
#
#   Open a unix socket to receive the LDB operations forwarded by
#   the Zentyal LDB module
#
# Parameters:
#
#   path - The socket path
#
# Returns:
#
#   The server instance on success, undef on error
#
sub openSocket
{
    my ($path) = @_;

    # Open unix socket
    unlink $path;
    $server = IO::Socket::UNIX->new(Type   => SOCK_STREAM,
                                    Local  => $path,
                                    Listen => SOMAXCONN);
    if (defined $server) {
        $server->autoflush(1);
    }

    return $server;
}

sub debugMessage
{
    my ($op, $dn, $msg, $object) = @_;

    _debug("===============================================================");
    _debug("$op: '$dn'");;
    _debug("--- MESSAGE ---------------------------------------------------");
    if (defined $msg) {
        foreach my $attr (keys $msg) {
            _debug( "$attr");
            if (defined $msg->{$attr} and defined $msg->{$attr}->{flags}) {
                _debug( "    flags => $msg->{$attr}->{flags}");
            }
            if (defined $msg->{$attr}->{values}) {
                my $values = "    values => [";
                foreach my $val (@{$msg->{$attr}->{values}}) {
                    my $val2 = decode_base64($val);
                    chomp $val2;
                    $values .= "'$val2',";
                }
                $values .= "]";
                _debug($values);
            }
        }
    }
    _debug("--- OBJECT ----------------------------------------------------");
    if (defined $object) {
        foreach my $attr (keys $object) {
            _debug( "$attr");
            if (defined $object->{$attr} and defined $object->{$attr}->{flags}) {
                _debug( "    flags => $object->{$attr}->{flags}");
            }
            if (defined $object->{$attr}->{values}) {
                my $values = "    values => [";
                foreach my $val (@{$object->{$attr}->{values}}) {
                    my $val2 = decode_base64($val);
                    chomp $val2;
                    $values .= "'$val2',";
                }
                $values .= "]";
                _debug($values);
            }
        }
    }
    _debug("===============================================================");
}

sub _error
{
    my ($msg) = @_;

    EBox::error($msg);
    print "ERROR: $msg\n";
}

sub _warning
{
    my ($msg) = @_;

    EBox::warn($msg);
    print "WARNING: $msg\n";
}

sub _info
{
    my ($msg) = @_;

    EBox::info($msg);
    print "INFO: $msg\n";
}

sub _debug
{
    my ($msg) = @_;

    EBox::debug($msg);
    print "DEBUG: $msg\n";
}
