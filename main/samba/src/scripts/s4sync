#!/usr/bin/perl

use strict;

use Array::Diff;
use Net::Domain qw(hostname);
use Error qw(:try);
use Data::Dumper;

use EBox;
use EBox::Global;

my $PERIOD = 60; # TODO: move this to conf?

# There users and groups won't be synchronized to LDAP
my $dnsUserToIgnore = 'dns-' . hostname();
my @sambaUsersToIgnore = ('krbtgt', 'Administrator', $dnsUserToIgnore, 'Guest');
my @sambaGroupsToIgnore = ('Read-Only Domain Controllers', 'Group Policy Creator Owners', 'Domain Controllers', 'Domain Computers', 'DnsUpdateProxy', 'Domain Admins',
                           'Domain Guests', 'Domain Users', 'Users');

# These are the users and groups ignored. All users and groups that are not in
# samba neither in this arrays will be deleted
my @ldapUsersToIgnore  = ('ham', 'spam');
my @ldapGroupsToIgnore = ('__USERS__');

#############################################################################
## Info, error and debug helper functions                                  ##
#############################################################################
sub debug
{
    my ($msg) = @_;
#    print "$msg\n";
    EBox::debug ("$msg");
}

sub info
{
    my ($msg) = @_;
#    print "$msg\n";
    EBox::info ("$msg");
}

sub error
{
    my ($msg) = @_;
#    print "$msg\n";
    EBox::error ("$msg");
}

#############################################################################
## LDB related functions                                                   ##
#############################################################################

# Method: getSambaUsers
#
#   This method get all users stored in the LDB
#
# Parameters:
#
#   sambaModule - Instance of the zentyal samba module
#   usersToIgnore (optional) - A reference to a list containing
#       the users to ignore
#
# Returns:
#
#   A hash reference containing all found entries
#
sub getSambaUsers
{
    my ($sambaModule, $usersToIgnore) = @_;

    my $users = {};
    my $ldb = $sambaModule->ldb();
    my $result = $ldb->search({
            base   => $ldb->rootDn(),
            scope  => 'sub',
            filter => '(&(objectClass=user)(userAccountControl:1.2.840.113556.1.4.803:=0x00000200))',
            attrs  => ['sAMAccountName', 'cn', 'givenName', 'sn', 'description', 'whenChanged']});
    if (defined $usersToIgnore) {
        my %usersToIgnore = map { $_ => 1 } @{$usersToIgnore};
        foreach my $entry (@{$result}) {
            my $entryId = @{$entry->{'sAMAccountName'}}[0];
            unless (exists $usersToIgnore{$entryId}) {
                $users->{$entryId} = $entry;
            }
        }
    }
    return $users;
}

# Method: getSambaGroups
#
#   This method get all groups stored in the LDB
#
# Parameters:
#
#   sambaModule - An instance of the zentyal samba module
#   groupsToIgnore (optional) - A reference to a list containing
#       the groups to ignore
#
# Returns:
#
#   A hash reference containing all found entries
#
sub getSambaGroups
{
    my ($sambaModule, $groupsToIgnore) = @_;

    my $groups = {};
    my $ldb = $sambaModule->ldb();
    my $result = $ldb->search({
            base   => $ldb->rootDn(),
            scope  => 'sub',
            filter => '(&(objectClass=group)(groupType:1.2.840.113556.1.4.803:=0x0000002))',
            attrs  => ['sAMAccountName', 'member', 'whenChanged', 'description']});
    if (defined $groupsToIgnore) {
        my %groupsToIgnore = map { $_ => 1 } @{$groupsToIgnore};
        foreach my $entry (@{$result}) {
            my $entryId = @{$entry->{'sAMAccountName'}}[0];
            unless (exists $groupsToIgnore{$entryId}) {
                $groups->{$entryId} = $entry;
            }
        }
    }
    return $groups;
}

#############################################################################
## LDAP related functions                                                  ##
#############################################################################

# Method: getLdapUsers
#
#   This method get all users stored in the LDAP
#
# Parameters:
#
#   usersModule - An instance of the zentyal users module
#   usersToIgnore (optional) - A reference to a list containing
#       the users to ignore
#
# Returns:
#
#   A hash reference containing all found entries
#
sub getLdapUsers
{
    my ($usersModule, $usersToIgnore) = @_;

    my $users = {};
    my $result = $usersModule->{ldap}->search({
            base   => $usersModule->usersDn(),
            scope  => 'one',
            filter => 'objectClass=posixAccount',
            attrs => ['uid','modifyTimestamp']});
    my @entries = $result->entries;
    if (defined $usersToIgnore) {
        my %usersToIgnore = map { $_ => 1 } @{$usersToIgnore};
        foreach my $entry (@entries) {
            unless (exists $usersToIgnore{$entry->get_value('uid')}) {
                $users->{$entry->get_value('uid')} = $entry;
            }
        }
    }
    return $users;
}

# Method: getLdapGroups
#
#   This method get all groups stored in the LDAP
#
# Parameters:
#
#   usersModule - An instance of the zentyal users module
#   usersToIgnore (optional) - A reference to a list containing
#       the groups to ignore
#
# Returns:
#
#   hash reference containing all found entries
#
sub getLdapGroups
{
    my ($usersModule, $groupsToIgnore) = @_;

    my $groups = {};
    my $result = $usersModule->{ldap}->search({
            base   => $usersModule->groupsDn(),
            scope  => 'one',
            filter => 'objectClass=posixGroup',
            attrs  => ['cn', 'member', 'modifyTimestamp']});
    my @entries = $result->entries;
    if (defined $groupsToIgnore) {
        my %groupsToIgnore = map { $_ => 1 } @{$groupsToIgnore};
        foreach my $entry (@entries) {
            unless (exists $groupsToIgnore{$entry->get_value('cn')}) {
                $groups->{$entry->get_value('cn')} = $entry;
            }
        }
    }
    return $groups;
}

# Method: addLdapUser
#
#   This method add a user to LDAP
#
# Parameters:
#
#   usersModule - An instance of the zentyal users module
#   credentials - A hash reference to the new user samba credentials
#   sambaUser - A reference to the samba user to be added (the LDB entry)
#
sub addLdapUser
{
    my ($usersModule, $credentials, $sambaUser) = @_;

    my $accountName = @{$sambaUser->{'sAMAccountName'}}[0];
    my $fullname = @{$sambaUser->{'cn'}}[0];
    my $givenname = @{$sambaUser->{'givenName'}}[0];
    my $surname = @{$sambaUser->{'sn'}}[0];
    my $comment = @{$sambaUser->{'description'}}[0];
    if (exists $credentials->{'Primary:CLEARTEXT'}) {
        try {
            info ("Adding user '$accountName' to LDAP");
            my $user;
            $user->{'user'} = $accountName;
            $user->{'password'} = $credentials->{'Primary:CLEARTEXT'};
            $user->{'givenname'} = length ($givenname) > 0 ? $givenname : $accountName;
            $user->{'surname'} = length ($surname) > 0 ? $surname : $accountName;
            $user->{'cn'} = length ($fullname) > 0 ? $fullname : $accountName;
            if (length ($comment) > 0) {
                $user->{'comment'} = $comment;
            }

            my %params;
            $params{ignoreMods} = ['samba'];
            my $newUser = EBox::UsersAndGroups::User->create($user, 0, %params);
        } otherwise {
            my $error = shift;
            error ("Error adding user to LDAP: $error");
        };
    } else {
        error ("Samba user '$accountName' do not added to LDAP: password not found");
    }
}

# Method: delLdapUser
#
#   This method removes a user from LDAP
#
# Parameters:
#
#   usersModule - An instance of the zentyal users module
#   userId - The ID of the user to remove (the sAMAccountName)
#
sub delLdapUser
{
    my ($usersModule, $userId) = @_;

    try {
        info ("Deleting user '$userId' from LDAP");
        my $dn = $usersModule->userDn($userId);
        my $user = new EBox::UsersAndGroups::User(dn => $dn);
        my $ignoreMods = ['samba'];
        $user->deleteObject($ignoreMods);
    } otherwise {
        my $error = shift;
        error ("Error deleting user from LDAP: $error");
    }
}
# Method: addLdapGroup
#
#   This method add a group to LDAP
#
# Parameters:
#
#   usersModule - An instance of the zentyal users module
#   sambaGroup - A reference to the samba group to be added (the LDB entry)
#
sub addLdapGroup
{
    my ($usersModule, $sambaGroup) = @_;

    try {
        my $groupname = @{$sambaGroup->{'sAMAccountName'}}[0];
        my $description = @{$sambaGroup->{'description'}}[0];
        my $comment = length ($description) > 0 ? $description : undef;
        info ("Adding group '$groupname' to LDAP");
        my %params;
        $params{ignoreMods} = ['samba'];
        my $group = EBox::UsersAndGroups::Group->create($groupname, $comment, 0, %params);
    } otherwise {
        my $error = shift;
        error ("Error adding group to LDAP: $error");
    }
}

# Method: delLdapGroup
#
#   This method removes a group from LDAP
#
# Parameters:
#
#   usersModule - An instance of the zentyal users module
#   group - The ID of the group to remove (the cn)
#
sub delLdapGroup
{
    my ($usersModule, $groupId) = @_;

    try {
        info ("Deleting group '$groupId' from ldap");
        my $dn = $usersModule->groupDn($groupId);
        my $group = new EBox::UsersAndGroups::Group(dn => $dn);
        my $ignoreMods = ['samba'];
        $group->deleteObject($ignoreMods);
    } otherwise {
        my $error = shift;
        error ("Error deleting group from LDAP: $error");
    }
}

# Method: addLdapUserToGroup
#
#   This method add a LDAP user to a LDAP group
#
# Parameters:
#
#   usersModule - An instance of the zentyal users module
#   user - The name of the user
#   group - The name of the group
#
sub addLdapUserToLdapGroup
{
    my ($usersModule, $userId, $groupId) = @_;

    try {
        info ("Adding user '$userId' to group '$groupId' in LDAP");
        my $userdn = $usersModule->userDn($userId);
        my $user = new EBox::UsersAndGroups::User(dn => $userdn);
        my $groupdn = $usersModule->groupDn($groupId);
        my $group = new EBox::UsersAndGroups::Group(dn => $groupdn);
        $group->addMember($user, 1);
        $group->save(['samba']);
    } otherwise {
        my $error = shift;
        error ("Error adding user '$userId' to LDAP group '$groupId': $error");
    }
}

# Method: delLdapUserFromGroup
#
#   This method delete a LDAP user from a LDAP group
#
# Parameters:
#
#   usersModule - An instance of the zentyal users module
#   user - The name of the user
#   group - The name of the group
#
sub delLdapUserFromLdapGroup
{
    my ($usersModule, $userId, $groupId) = @_;

    try {
        info ("Removing user '$userId' from group '$groupId' in LDAP");
        my $userdn = $usersModule->userDn($userId);
        my $user = new EBox::UsersAndGroups::User(dn => $userdn);
        my $groupdn = $usersModule->groupDn($groupId);
        my $group = new EBox::UsersAndGroups::Group(dn => $groupdn);
        $group->removeMember($user, 1);
        $group->save(['samba']);
    } otherwise {
        my $error = shift;
        error ("Error deleting user '$userId' from LDAP group '$groupId': $error");
    }
}

# Method: updateLdapGroup
#
#   This method update the group members in LDAP
#
# Parameters:
#
#   usersModule - An instance of the zentyal users module
#   sambaModule - An instance of the zentyal samba module
#   sambaGroup - A reference to the LDB group entry to synchronize
#   ldapGroup - A reference to the LDAP group entry to synchronize
#
sub updateLdapGroup
{
    my ($usersModule, $sambaModule, $sambaGroup, $ldapGroup,
        $sambaUsersToIgnore, $ldapUsersToIgnore) = @_;

    ## Get the group name
    my $groupId = @{$sambaGroup->{sAMAccountName}}[0];
    $sambaModule->ldb()->syncGroupMembersLdbToLdap($groupId);

    # Update the group description
    try {
        my $groupdn = $usersModule->groupDn($groupId);
        my $group = new EBox::UsersAndGroups::Group(dn => $groupdn);
        my $comment = $sambaGroup->{description}[0];
        if (length ($comment) > 0) {
            $group->set('description', $comment, 1);
            $group->save(['samba']);
        } elsif ($group->get('description')) {
            $group->delete('description', 1);
            $group->save(['samba']);
        }
    } otherwise {
        my $error = shift;
        error ("Error updating group description: $error");
    }
}

# Method: updateLdapUser
#
#   This method update the user information in LDAP
#
# Parameters:
#
#   usersModule - An instance of the zentyal users module
#   sambaModule - An instance of the zentyal samba module
#   sambaUser - A reference to a sambaUser (an LDB entry)
#
sub updateLdapUser
{
    my ($usersModule, $sambaModule, $sambaUser) = @_;

    my $userId = @{$sambaUser->{sAMAccountName}}[0];
    try {
        info ("Updating user '$userId' from samba to LDAP");
        my $ldb = $sambaModule->ldb();
        my $credentials = $ldb->getSambaCredentials($userId);

        my $accountName = @{$sambaUser->{'sAMAccountName'}}[0];
        my $fullname = @{$sambaUser->{'cn'}}[0];
        my $givenname = @{$sambaUser->{'givenName'}}[0];
        my $surname = @{$sambaUser->{'sn'}}[0];
        my $comment = @{$sambaUser->{'description'}}[0];

        my $dn = $usersModule->userDn($userId);
        my $user = new EBox::UsersAndGroups::User(dn => $dn);
        $user->set('givenname', length ($givenname) > 0 ? $givenname : $accountName, 1);
        $user->set('surname', length ($surname) > 0 ? $surname : $accountName, 1);
        $user->set('cn', length ($fullname) > 0 ? $fullname : $accountName, 1);
        if (length ($comment) > 0) {
            $user->set('description', $comment, 1);
        }
        if (defined $credentials->{'Primary:CLEARTEXT'}) {
            $user->changePassword('password', $credentials->{'Primary:CLEARTEXT'}, 1);
        }

        my $ignoreMods = ['samba'];
        $user->save($ignoreMods);
    } otherwise {
        my $error = shift;
        error ("Error updating user '$userId' in LDAP: $error");
    }
}

####################################################################################################

EBox::init();

my $usersModule = EBox::Global->modInstance('users');
my $sambaModule = EBox::Global->modInstance('samba');

while (1) {
    my $ldapUsers = getLdapUsers ($usersModule, \@ldapUsersToIgnore);
    my $ldapGroups = getLdapGroups ($usersModule, \@ldapGroupsToIgnore);

    my $sambaUsers = getSambaUsers ($sambaModule, \@sambaUsersToIgnore);
    my $sambaGroups = getSambaGroups ($sambaModule, \@sambaGroupsToIgnore);

    debug ("Got " . scalar(keys(%{$sambaUsers})) . " samba users and " .
            scalar(keys(%{$ldapUsers})) . " ldap users" );
    debug ("Got " . scalar(keys(%{$sambaGroups})) . " samba groups and " .
            scalar(keys(%{$ldapGroups})) . " ldap groups" );

    # Insert new users from Samba to LDAP
    foreach my $sambaUser (keys %{$sambaUsers}) {
        # If the user exists in samba but not in LDAP insert in LDAP
        unless (exists $ldapUsers->{$sambaUser}) {
            # Get the user credentials
            my $ldb = $sambaModule->ldb();
            my $userCredentials = $ldb->getSambaCredentials($sambaUser);
            addLdapUser ($usersModule, $userCredentials, $sambaUsers->{$sambaUser});
        }
    }

    # Insert new groups from Samba to LDAP
    foreach my $sambaGroup (keys %{$sambaGroups}) {
        # If the group exists in samba but not in LDAP insert in LDAP
        unless (exists $ldapGroups->{$sambaGroup}) {
            addLdapGroup ($usersModule, $sambaGroups->{$sambaGroup});
        }
    }

    # Delete users that are not in Samba
    foreach my $user (keys %{$ldapUsers}) {
        # If the user exists in LDAP but not in samba, delete from LDAP
        unless (exists $sambaUsers->{$user}) {
            delLdapUser ($usersModule, $user);
        }
    }

    # Delete groups that are not in Samba
    foreach my $group (keys %{$ldapGroups}) {
        # If the group exists in LDAP but not in samba, delete from LDAP
        unless (exists $sambaGroups->{$group}) {
            delLdapGroup ($usersModule, $group);
        }
    }

    # Sync user information like passwords, descriptions from Samba to LDAP
    foreach my $userId (keys %{$sambaUsers}) {
        my $sambaChangeTime = @{$sambaUsers->{$userId}->{whenChanged}}[0];
        if (exists $ldapUsers->{$userId}) {
            my $ldapChangeTime = $ldapUsers->{$userId}->get_value('modifyTimestamp');
            $sambaChangeTime =~ s/(\.\d*)?Z//g;
            $ldapChangeTime =~ s/(\.\d*)?Z//g;

            if ($sambaChangeTime > $ldapChangeTime) {
                my $user = $sambaUsers->{$userId};
                updateLdapUser ($usersModule, $sambaModule, $user);
            }
        }
    }

    # Sync group memberships from Samba to LDAP
    foreach my $groupId (keys %{$sambaGroups}) {
        my $sambaChangeTime = @{$sambaGroups->{$groupId}->{whenChanged}}[0];
        if (exists $ldapGroups->{$groupId}) {
            my $ldapChangeTime = $ldapGroups->{$groupId}->get_value('modifyTimestamp');
            $sambaChangeTime =~ s/(\.\d*)?Z//g;
            $ldapChangeTime =~ s/(\.\d*)?Z//g;
            if ($sambaChangeTime > $ldapChangeTime) {
                my $sambaGroup = $sambaGroups->{$groupId};
                my $ldapGroup = $ldapGroups->{$groupId};
                updateLdapGroup ($usersModule, $sambaModule, $sambaGroup, $ldapGroup,
                        \@sambaUsersToIgnore, \@ldapUsersToIgnore);
            }
        }
    }

    sleep ($PERIOD);
}
