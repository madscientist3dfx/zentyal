#!/usr/bin/perl
# Copyright (C) 2010-2012 eBox Technologies S.L.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License, version 2, as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

use strict;
use warnings;

# for performance we check first if there are pending operations
unless (grep { -d $_ } </var/lib/zentyal*/syncjournal/*>) {
    exit 0;
}

use EBox;
use EBox::Config;
use EBox::Global;
use EBox::Util::Lock;

use Error qw(:try);

use constant LOCK_NAME => 'zentyal-slave-sync';

my $mode = 'run';
if (($#ARGV == 0) and ($ARGV[0] eq '-l')) {
    $mode = 'list';
}

EBox::init();
my $users = EBox::Global->modInstance('users');
$users->configured() or exit 0;

EBox::Util::Lock::lock(LOCK_NAME);

my $slaves = $users->allSlaves();
try {
    (@{$slaves}) or exit 0;
} otherwise {
    exit 0;
};

processDir($slaves, EBox::Config::home() . 'syncjournal/');

if (EBox::Global->modExists('usercorner')) {
    eval 'use EBox::UserCorner';
    processDir($slaves, EBox::UserCorner::usercornerdir() . 'syncjournal/');
}

EBox::Util::Lock::unlock(LOCK_NAME);

exit 0;

sub processSlaveDir
{
    my ($slave, $dir) = @_;

    my $name = $slave->name;

    if ($mode eq 'list') {
        print "Slave: $name\n";
    }

    my $dh;
    opendir($dh, $dir) or
        die "Can't open the journal dir: $dir\n";

    my %files;
    while (defined(my $file = readdir($dh))) {
        (-d "$dir$file" and next);
        $files{$file} = (stat("$dir$file"))[9];
    }
    closedir($dh);

    foreach my $file (sort { $files{$a} cmp $files{$b} } keys %files){
        processFile($slave, "$dir$file");
    }
}

sub processFile
{
    my ($slave, $file) = @_;

    open(FILE, $file);
    my ($method, $param, @params) = <FILE>;
    close(FILE);
    chomp($method);
    chomp($param);
    @params = map { chomp($_); $_ } @params;

    my $client = $users->soapClient($slave);

    if ($mode eq 'run') {
        try {
            $client->$method($param, @params);
            #remove with sudo because it can be a usercorner file
            EBox::Sudo::root("rm -f $file");
        } otherwise {
            EBox::debug("Trying to run method $method with param $param on slave $slave->{'hostname'} failed.");
        };
    } elsif ($mode eq 'list') {
        print " * $method: $param\n";
    }
}

sub processDir
{
    my ($slaves, $journaldir) = @_;

    my $jdir;
    opendir($jdir, $journaldir) or die "Can't open the journal dir: $journaldir\n";

    foreach my $slave (@{$slaves}) {
        my $name = $slave->name();
        my $slavedir = "$journaldir/$name/";
        processSlaveDir($slave, $slavedir);
    }
    closedir($jdir);
}

1;
